//Command 0

db.test.insertMany([
   {
       "_id" : 1,
       "name" : {
           "first" : "John",
           "last" : "Backus"
       },
       "birth" : ISODate("1924-12-03T05:00:00Z"),
       "death" : ISODate("2007-03-17T04:00:00Z"),
       "contribs" : [
           "Fortran",
           "ALGOL",
           "Backus-Naur Form",
           "FP"
       ],
       "awards" : [
           {
               "award" : "W.W. McDowell Award",
               "year" : 1967,
               "by" : "IEEE Computer Society"
           },
           {
               "award" : "National Medal of Science",
               "year" : 1975,
               "by" : "National Science Foundation"
           },
           {
               "award" : "Turing Award",
               "year" : 1977,
               "by" : "ACM"
           },
           {
               "award" : "Draper Prize",
               "year" : 1993,
               "by" : "National Academy of Engineering"
           }
       ]
   },
   {
       "_id" : ObjectId("51df07b094c6acd67e492f41"),
       "name" : {
           "first" : "John",
           "last" : "McCarthy"
       },
       "birth" : ISODate("1927-09-04T04:00:00Z"),
       "death" : ISODate("2011-12-24T05:00:00Z"),
       "contribs" : [
           "Lisp",
           "Artificial Intelligence",
           "ALGOL"
       ],
       "awards" : [
           {
               "award" : "Turing Award",
               "year" : 1971,
               "by" : "ACM"
           },
           {
               "award" : "Kyoto Prize",
               "year" : 1988,
               "by" : "Inamori Foundation"
           },
           {
               "award" : "National Medal of Science",
               "year" : 1990,
               "by" : "National Science Foundation"
           }
       ]
   },
   {
       "_id" : 3,
       "name" : {
           "first" : "Grace",
           "last" : "Hopper"
       },
       "title" : "Rear Admiral",
       "birth" : ISODate("1906-12-09T05:00:00Z"),
       "death" : ISODate("1992-01-01T05:00:00Z"),
       "contribs" : [
           "UNIVAC",
           "compiler",
           "FLOW-MATIC",
           "COBOL"
       ],
       "awards" : [
           {
               "award" : "Computer Sciences Man of the Year",
               "year" : 1969,
               "by" : "Data Processing Management Association"
           },
           {
               "award" : "Distinguished Fellow",
               "year" : 1973,
               "by" : " British Computer Society"
           },
           {
               "award" : "W. W. McDowell Award",
               "year" : 1976,
               "by" : "IEEE Computer Society"
           },
           {
               "award" : "National Medal of Technology",
               "year" : 1991,
               "by" : "United States"
           }
       ]
   },
   {
       "_id" : 4,
       "name" : {
           "first" : "Kristen",
           "last" : "Nygaard"
       },
       "birth" : ISODate("1926-08-27T04:00:00Z"),
       "death" : ISODate("2002-08-10T04:00:00Z"),
       "contribs" : [
           "OOP",
           "Simula"
       ],
       "awards" : [
           {
               "award" : "Rosing Prize",
               "year" : 1999,
               "by" : "Norwegian Data Association"
           },
           {
               "award" : "Turing Award",
               "year" : 2001,
               "by" : "ACM"
           },
           {
               "award" : "IEEE John von Neumann Medal",
               "year" : 2001,
               "by" : "IEEE"
           }
       ]
   },
   {
       "_id" : 5,
       "name" : {
           "first" : "Ole-Johan",
           "last" : "Dahl"
       },
       "birth" : ISODate("1931-10-12T04:00:00Z"),
       "death" : ISODate("2002-06-29T04:00:00Z"),
       "contribs" : [
           "OOP",
           "Simula"
       ],
       "awards" : [
           {
               "award" : "Rosing Prize",
               "year" : 1999,
               "by" : "Norwegian Data Association"
           },
           {
               "award" : "Turing Award",
               "year" : 2001,
               "by" : "ACM"
           },
           {
               "award" : "IEEE John von Neumann Medal",
               "year" : 2001,
               "by" : "IEEE"
           }
       ]
   },
   {
       "_id" : 6,
       "name" : {
           "first" : "Guido",
           "last" : "van Rossum"
       },
       "birth" : ISODate("1956-01-31T05:00:00Z"),
       "contribs" : [
           "Python"
       ],
       "awards" : [
           {
               "award" : "Award for the Advancement of Free Software",
               "year" : 2001,
               "by" : "Free Software Foundation"
           },
           {
               "award" : "NLUUG Award",
               "year" : 2003,
               "by" : "NLUUG"
           }
       ]
   },
   {
       "_id" : ObjectId("51e062189c6ae665454e301d"),
       "name" : {
           "first" : "Dennis",
           "last" : "Ritchie"
       },
       "birth" : ISODate("1941-09-09T04:00:00Z"),
       "death" : ISODate("2011-10-12T04:00:00Z"),
       "contribs" : [
           "UNIX",
           "C"
       ],
       "awards" : [
           {
               "award" : "Turing Award",
               "year" : 1983,
               "by" : "ACM"
           },
           {
               "award" : "National Medal of Technology",
               "year" : 1998,
               "by" : "United States"
           },
           {
               "award" : "Japan Prize",
               "year" : 2011,
               "by" : "The Japan Prize Foundation"
           }
       ]
   },
   {
       "_id" : 8,
       "name" : {
           "first" : "Yukihiro",
           "aka" : "Matz",
           "last" : "Matsumoto"
       },
       "birth" : ISODate("1965-04-14T04:00:00Z"),
       "contribs" : [
           "Ruby"
       ],
       "awards" : [
           {
               "award" : "Award for the Advancement of Free Software",
               "year" : "2011",
               "by" : "Free Software Foundation"
           }
       ]
   },
   {
       "_id" : 9,
       "name" : {
           "first" : "James",
           "last" : "Gosling"
       },
       "birth" : ISODate("1955-05-19T04:00:00Z"),
       "contribs" : [
           "Java"
       ],
       "awards" : [
           {
               "award" : "The Economist Innovation Award",
               "year" : 2002,
               "by" : "The Economist"
           },
           {
               "award" : "Officer of the Order of Canada",
               "year" : 2007,
               "by" : "Canada"
           }
       ]
   },
   {
       "_id" : 10,
       "name" : {
           "first" : "Martin",
           "last" : "Odersky"
       },
       "contribs" : [
           "Scala"
       ]
   }

] )



db.test.find( {} )


//Command 1.1

db.test.insertOne(

{
 
"_id" : 20,
 
"name" : {
 
"first" : "Alex"
,
 
"last" : "Chen"
 
},
 
"birth" : ISODate("1933-08-27T04:00:00Z"),
 
"death" : ISODate("1984-11-07T04:00:00Z"),
 
"contribs" : [
 
"C++"
,
 
"Simula"
 
],
 
"awards" : [
 
{
 
"award" : "WPI Award"
,
 
"year" : 1977,
 
"by" : "WPI"
 
}
 
]
} 
)


//Command 1.2

db.test.insertOne(
{
 
"_id" : 30,
 
"name" : {
 
"first" : "David"
,
 
"last" : "Mark"
 
},
 
"birth" : ISODate("1911-04-12T04:00:00Z"),
 
"death" : ISODate("2000-11-07T04:00:00Z"),
 
"contribs" : [
 
"C++"
,
 
"FP"
,
 
"Lisp"
,
 
],
 
"awards" : [
 
{
 
"award" : "WPI Award"
,
 
"year" : 1963,
 
"by" : "WPI"
 
},
 
{ 
 
"award" : "Turing Award"
,
 
"year" : 1966,
 
"by" : "ACM"
 
}
 
]
} 
)



//Command 3
//Update the document of “Guido van Rossum” to add “OOP” to the contribution list

//db.test.find({ "name.first": "Guido", "name.last": "van Rossum" })

db.test.update(
   { "name.first": "Guido", "name.last": "van Rossum" },
   { $addToSet: { contribs: "OOP" } }
)


//Command 5 - NOT DONE
/* For each contribution by “Alex Chen”, say X, list the peoples’ names (first and last) who have 
contribution X. 
E.g., Alex Chen has two contributions in “C++” and “Simula”. Then, the output 
should be similar to:
a. {Contribution: “C++”, 
People: [{first: “Alex”, last: “Chen”}, {first: “David”, last: “Mark”}]},
{ Contribution: “Simula”,
 
….}
*/




//Command 7 
//Delete from all documents any award given on 2011.


db.test.update(
    { },
    { $pull: { awards: {year: "2011"} } },
    { multi: true }
)


//Command 9 - Not Done
// Report the document with the largest id. First, you need to find the largest _id (using a CRUD 
statement), and then use that to report the corresponding document.

//This sort based on String "comparison" and whichever is larger, not just int




//Question 2

/*
1) Write an aggregation query that group by the award name, i.e., the “award” field inside the “awards” 
array and reports the count of each award. */

db.test.aggregate( [
{$unwind: '$awards' },
  {
    $group: {
       _id : "$awards.award",
       count: { $sum: 1 }
    }
  }
] )

/*
2) Write an aggregation query that groups by the birth year, i.e., the year within the “birth” field, and
report an array of _ids for each birth year.
*/


db.test.aggregate( [
{$unwind: '$birth' },
{
       $project:
         {
           year: { $year: "$birth" }
         }
     },

       {
    $group: {
       _id: "$year",
       "projects" : {"$addToSet" : {id : "$_id"}}
    }
  }

] )

/*
3) Report the document with the smallest and largest _ids. You first need to find the values of the smallest 
and largest, and then report their documents.
*/

maxQuantity: { $max: "$quantity" }


db.students.aggregate([
   { $project: { quizMax: { $max: "$quizzes"}, labMax: { $max: "$labs" }, examMax: { $max: [ "$final", "$midterm" ] } } }
])

db.test.aggregate( [
{ $project: { quizMax: { $max: "$_id"} } },
       {
    $group: {
       _id: $max
    }
  }

] )

,
   { "$match": {"_id": {"$first": "$_id" } }}

db.test.aggregate([
   { $sort: { _id: 1 } },
   { $group: { 
       _id: "$_id"
   }},
   {$match: {_id: {$gt:3}}}
])
